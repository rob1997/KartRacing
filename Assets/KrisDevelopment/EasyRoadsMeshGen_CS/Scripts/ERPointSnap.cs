using UnityEngine;
#if UNITY_EDITOR
using UnityEditor;
#endif
using System.Collections;

namespace ERMG
{
	/// <summary>
	/// Add this script to an empty object to snap the end points of the Easy Roads mesh to the current transform
	/// This script is automatically added to all Nav Points generated by ER to do the check and return transform information to the Mesh Gen script.
	/// </summary>
	[AddComponentMenu("Easy Roads Mesh Gen/Point Snap")]
	[ExecuteInEditMode]
	public class ERPointSnap : MonoBehaviour
	{
		public bool passive = false;
		[HideInInspector]
		public bool snapped = false;
		[HideInInspector]
		public Vector3 originalPos = Vector3.zero;
		[HideInInspector]
		public Vector3 originalRot = Vector3.zero;
		[HideInInspector]
		public int snapModeInt = 0;
		[HideInInspector]
		public Transform snappedToPoint;

		private void Update()
		{
			if (snapped)
				UpdatePos();
		}

		private void OnDrawGizmosSelected()
		{
			if (snapped)
				UpdatePos();
		}

		public void UpdatePos()
		{
			if (snappedToPoint == null)
				return;

			Vector3 inverseFactor = Vector3.zero;

			if (snapModeInt == 1)
				inverseFactor = new Vector3(1, 1, 1);
			if (snapModeInt == 2)
				inverseFactor = new Vector3(1, 0, 0);
			if (snapModeInt == 3)
				inverseFactor = new Vector3(0, 1, 0);
			if (snapModeInt == 4)
				inverseFactor = new Vector3(0, 0, 1);
			if (snapModeInt == 5)
				inverseFactor = new Vector3(1, 1, 0);
			if (snapModeInt == 6)
				inverseFactor = new Vector3(1, 0, 1);
			if (snapModeInt == 7)
				inverseFactor = new Vector3(0, 1, 1);

			transform.position = snappedToPoint.position;
			transform.eulerAngles = snappedToPoint.eulerAngles + inverseFactor * 180f;
		}

#if UNITY_EDITOR
		public void SnapToPointTransform()
		{
			SerializedObject so = new SerializedObject(this);
			SerializedProperty so_snapped = so.FindProperty("snapped");
			SerializedProperty so_snappedToPoint = so.FindProperty("snappedToPoint");
			SerializedProperty so_originalPos = so.FindProperty("originalPos");
			SerializedProperty so_originalRot = so.FindProperty("originalRot");
			//SerializedProperty so_pos = so.FindProperty("transform").FindPropertyRelative("position");
			//SerializedProperty so_rot = so.FindProperty("transform").FindPropertyRelative("eulerAngles");

			Vector3 inverseFactor = Vector3.zero;

			if (snapModeInt == 1)
				inverseFactor = new Vector3(1, 1, 1);
			if (snapModeInt == 2)
				inverseFactor = new Vector3(1, 0, 0);
			if (snapModeInt == 3)
				inverseFactor = new Vector3(0, 1, 0);
			if (snapModeInt == 4)
				inverseFactor = new Vector3(0, 0, 1);
			if (snapModeInt == 5)
				inverseFactor = new Vector3(1, 1, 0);
			if (snapModeInt == 6)
				inverseFactor = new Vector3(1, 0, 1);
			if (snapModeInt == 7)
				inverseFactor = new Vector3(0, 1, 1);


			if (passive)
				return;

			so_originalPos.vector3Value = transform.position;
			so_originalRot.vector3Value = transform.eulerAngles;

			so_snapped.boolValue = true;

			ERPointSnap[] waypoints = GameObject.FindObjectsOfType(typeof(ERPointSnap)) as ERPointSnap[];
			Transform closest = null;
			float closeDist = Mathf.Infinity;
			foreach (ERPointSnap waypoint in waypoints)
			{
				float dist = (transform.position - waypoint.transform.position).sqrMagnitude;
				if (dist < closeDist && waypoint.transform.gameObject != transform.gameObject)
				{
					closeDist = dist;
					closest = waypoint.transform;
					so_snappedToPoint.objectReferenceValue = closest;
				}
			}

			if (closest != null)
			{
				transform.position = closest.transform.position;
				transform.eulerAngles = closest.transform.eulerAngles + inverseFactor * 180f;
			}
			else
				Debug.LogError("No Objects Found!");

			so.ApplyModifiedProperties();
		}

		public void UnSnap()
		{
			SerializedObject so = new SerializedObject(this);
			SerializedProperty so_snapped = so.FindProperty("snapped");

			if (passive)
				return;

			so_snapped.boolValue = false;
			transform.position = originalPos;
			transform.eulerAngles = originalRot;

			so.ApplyModifiedProperties();
		}

		public void ClearSnap()
		{
			SerializedObject so = new SerializedObject(this);
			SerializedProperty so_snapped = so.FindProperty("snapped");

			so_snapped.boolValue = false;

			so.ApplyModifiedProperties();
		}
#endif
	}
}